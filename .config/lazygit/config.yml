customCommands:
  - key: <c-a>
    description: Pick AI commit
    command: |
      aichat "Please suggest 10 commit messages, given the following diff:

        \`\`\`diff
        $(git diff --cached)
        \`\`\`

        **Criteria:**

        1. **Format:** Each commit message must follow the conventional commits format,
        which is \`<type>(<fileispath>/<scope>): <description>\`.
          NOTE: The fileishpath is not the fil path more like the parent directory or module.
        2. **Relevance:** Avoid mentioning a module name unless it's directly relevant
        to the change.
        3. **Clarity and Conciseness:** Each message should clearly and concisely convey
        the change made.
        4. **Muultiple Changes:** If multiple changes are present, make sure you capture them
        all in each commit message, seperated by a new line and using the format defaine in the
        first criteria.

        **Commit Message Examples:**

        1. Example 1
            fix(module/app): add password regex pattern
            test(applicatioin_name/unit): add new test cases
            refactor(path/pages): extract common code to \`utils/wait.ts\`

        2. Example 2
            refactor(module/app): refactor the applicatioin_name

        3. Example 3
            feat(module/app): add new feature to the app


        **Recent Commits on Repo for Reference:**

        \`\`\`
        $(git log -n 10 --pretty=format:'%h %s')
        \`\`\`

          | fzf --height 40% --border --ansi --preview "echo {}" --preview-window=up:wrap \
          | xargs -I {} bash -c '
              COMMIT_MSG_FILE=$(mktemp)
              echo "{}" > "$COMMIT_MSG_FILE"
              ${EDITOR:-vim} "$COMMIT_MSG_FILE"
              if [ -s "$COMMIT_MSG_FILE" ]; then
                  git commit -F "$COMMIT_MSG_FILE"
              else
                  echo "Commit message is empty, commit aborted."
              fi
              rm -f "$COMMIT_MSG_FILE"'
    context: files
    subprocess: true
