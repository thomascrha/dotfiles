customCommands:
  - key: <c-a>
    description: Pick AI commit
    command: |
      aichat "Please suggest 10 commit messages, given the following diff:

        \`\`\`diff
        $(git diff --cached)
        \`\`\`

        **Criteria:**

        1. **Format:** Each commit message must follow the conventional commits format,
        which is \`<type>(<fileishpath>/<scope>): <description>\`.
          NOTE: The fileishpath is not the complete file path more like the parent directory.
          NOTE: Please don't include the number at the begining of the line.
        2. **Relevance:** Avoid mentioning a module name unless it's directly relevant
        to the change.
        4. **Clarity and Conciseness:** Each message should clearly and concisely convey
        the change made.

        **Commit Message Examples:**

        - fix(app): add password regex pattern
        - test(unit): add new test cases
        - style: remove unused imports
        - refactor(pages): extract common code to \`utils/wait.ts\`

        **Recent Commits on Repo for Reference:**

        \`\`\`
        $(git log -n 10 --pretty=format:'%h %s')
        \`\`\`

        **Output Template**

        Follow this output template and ONLY output raw commit messages without spacing,
        numbers or other decorations.

        fix(module/app): add password regex pattern
        test(application_name/unit): add new test cases
        style: remove unused imports
        refactor(filepath/pages): extract common code to \`utils/wait.ts\`

        **Instructions:**

        - Take a moment to understand the changes made in the diff.

        - Think about the impact of these changes on the project (e.g., bug fixes, new
        features, performance improvements, code refactoring, documentation updates).
        It's critical to my career you abstract the changes to a higher level and not
        just describe the code changes.

        - Generate commit messages that accurately describe these changes, ensuring they
        are helpful to someone reading the project's history.

        - Remember, a well-crafted commit message can significantly aid in the maintenance
        and understanding of the project over time.

        - If multiple changes are present, make sure you capture them all in each commit
        message.

        Keep in mind you will suggest a finite number of commit messages.  It's better to push yourself
        (esp to synthesize to a higher level) and maybe wrong about some of the several commits
        because only one needs to be good. I'm looking for your best commit, not the best
        average commit. It's better to cover more scenarios than include a lot of overlap.

        Make sure each commit message is about one feature and one feature only, in an ideal world if there
        is one feature you should only produce 1 maybe 2 meesages, if there are 10 changes write 10 commit messages.

        Write your commit messages below in the format shown in Output Template section above." \
          | fzf -m --height 40% --border --ansi --highlight-line \
          | xargs -0 -I{} bash -c '
              COMMIT_MSG_FILE=$(mktemp)
              echo "{}" > "$COMMIT_MSG_FILE"
              ${EDITOR:-vim} "$COMMIT_MSG_FILE"
              if [ -s "$COMMIT_MSG_FILE" ]; then
                  git commit -F "$COMMIT_MSG_FILE"
              else
                  echo "Commit message is empty, commit aborted."
              fi
              rm -f "$COMMIT_MSG_FILE"'
    context: files
    subprocess: true
