return {
  setup = function()
    -- local servers = { }
    -- local lua_lsp = require('langs.lua').setup()
    -- table.insert(servers, lua_lsp)
    --
    -- local python_lsp = require('langs.python').setup()
    -- table.insert(servers, python_lsp)
    --
    -- local bash_lsp = require('langs.bash').setup()
    -- table.insert(servers, bash_lsp)

    local servers = {
      basedpyright = {},
      bashls = {},
      dockerls = {},
      html = {},
      jsonls = {},
      gopls = {},
      clangd = {},
      lua_ls = {
        Lua = {
          workspace = { checkThirdParty = false },
          telemetry = { enable = false },
          diagnostics = {
            -- Get the language server to recognize the `vim` global
            globals = {'vim'},
          },
        },
      },
    }
    -- Setup neovim lua configuration
    -- require('neodev').setup()
    --
    -- nvim-cmp supports additional completion capabilities, so broadcast that to servers
    local capabilities = vim.lsp.protocol.make_client_capabilities()
    capabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)

    -- Setup mason so it can manage external tooling
    require('mason').setup()

    -- Ensure the servers above are installed
    local mason_lspconfig = require 'mason-lspconfig'

    mason_lspconfig.setup {
      ensure_installed = vim.tbl_keys(servers),
    }

    mason_lspconfig.setup_handlers {
      function(server_name)
        vim.lsp.config[server_name] = {
          capabilities = capabilities,
          settings = servers[server_name],
        }
        vim.lsp.enable(server_name)
      end,
    }

    -- Turn on lsp status information
    require('fidget').setup()
    -- -- make sure all configured servers are installed
    -- require('mason-lspconfig').setup({
    --   ensure_installed = servers,
    -- })

    vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
      vim.lsp.diagnostic.on_publish_diagnostics,
      {
        virtual_text = false,
      }
    )

    -- vim.keymap.set('n', '<leader>rn', vim.lsp.buf.rename, { desc = '[R]ename' })
    vim.keymap.set('n', '<leader>ca', vim.lsp.buf.code_action, { desc = '[C]ode Action' })

    vim.keymap.set('n', '<leader>gd', vim.lsp.buf.definition, { desc = 'Goto [D]efinition' })
    vim.keymap.set('n', '<leader>gD', vim.lsp.buf.declaration, { desc ='[G]oto [D]eclaration' })
    vim.keymap.set('n', '<leader>gf', vim.lsp.buf.references, { desc = 'Goto [F]irst Reference' })
    vim.keymap.set('n', '<leader>gr', require('telescope.builtin').lsp_references, { desc = 'Goto [R]eferences' })
    vim.keymap.set('n', '<leader>gi', vim.lsp.buf.implementation, { desc = 'Goto [i]mplementation' })

    vim.keymap.set('n', '<leader>ls', require('telescope.builtin').lsp_document_symbols, { desc = '[D]ocument [S]ymbols' })
    vim.keymap.set('n', '<leader>lw', require('telescope.builtin').lsp_dynamic_workspace_symbols, { desc = '[W]orkspace [S]ymbols' })

    -- See `:help K` for why this keymap
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, { desc ='Hover Documentation' })
    vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, { desc ='Signature Documentation' })

  end
}
