-- Main LSP Configuration
return {
  setup = function()
    local capabilities = require("blink.cmp").get_lsp_capabilities()
    local servers = {
      -- lsps
      -- disabled as its broken
      -- azure_pipelines_ls = {
      --   settings = {
      --     cmd = {
      --       "/home/tcrha/Software/azure-pipelines-language-server/language-server/bin/azure-pipelines-language-server",
      --     },
      --     schemas = {
      --       ["https://raw.githubusercontent.com/microsoft/azure-pipelines-vscode/master/service-schema.json"] = {
      --         "azure-pipelines/**/*.y*l",
      --       },
      --     },
      --   },
      -- },
      bashls = {},
      docker_compose_language_service = {},
      dockerls = {},
      jsonls = {},
      terraformls = {},
      yamlls = {},
      clangd = {},
      -- gopls = {},
      pyright = {
        settings = {
          python = {
            analysis = {
              extraPaths = {},
              autoSearchPaths = true,
              useLibraryCodeForTypes = true,
              diagnosticMode = "workspace",
            },
          },
        },
        on_init = function(client)
          -- Try to find .venv in the project root
          local root_dir = client.config.root_dir
          if root_dir then
            local venv_path = root_dir .. "/.venv"
            local site_packages = ""

            -- Check if .venv directory exists
            local f = io.open(venv_path, "r")
            if f then
              f:close()

              -- Look for site-packages directory in the virtual environment
              local python_version_cmd = "find " .. venv_path .. "/lib -type d -name 'python*' | sort | head -1"
              local handle = io.popen(python_version_cmd)
              if handle then
                local python_lib_path = handle:read("*a"):gsub("%s+$", "")
                handle:close()

                if python_lib_path ~= "" then
                  site_packages = python_lib_path .. "/site-packages"

                  -- Add site-packages to extraPaths
                  client.config.settings.python.analysis.extraPaths = {
                    site_packages,
                  }

                  vim.notify("Python virtual environment found at: " .. venv_path, vim.log.levels.INFO)
                  vim.notify("Added to PYTHONPATH: " .. site_packages, vim.log.levels.INFO)
                end
              end
            end
          end
          return true
        end,
      },
      -- rust_analyzer = {},
      -- ... etc. See `:help lspconfig-all` for a list of all the pre-configured LSPs
      --
      -- Some languages (like typescript) have entire language plugins that can be useful:
      --    https://github.com/pmizio/typescript-tools.nvim
      --
      -- But for many setups, the LSP (`ts_ls`) will work just fine
      -- ts_ls = {},
      --

      lua_ls = {
        -- cmd = { ... },
        -- filetypes = { ... },
        -- capabilities = {},
        settings = {
          Lua = {
            completion = {
              callSnippet = "Replace",
            },
            -- You can toggle below to ignore Lua_LS's noisy `missing-fields` warnings
            -- diagnostics = { disable = { 'missing-fields' } },
          },
        },
      },
    }

    -- The following loop will configure each server with the capabilities we defined above.
    -- This will ensure that all servers have the same base configuration, but also
    -- allow for server-specific overrides.
    for server_name, server_config in pairs(servers) do
      server_config.capabilities = vim.tbl_deep_extend("force", {}, capabilities, server_config.capabilities or {})
      require("lspconfig")[server_name].setup(server_config)
    end
  end,
}
-- vim: set ft=lua ts=2 sts=2 sw=2 et:
